getwd()
setwd("D:/MyOwnData/JunJunProject/R/R-devlopment/ClusterGVis/ClusterGVis-submitto-bioc/ClusterGVis-0.99.3/ClusterGVis")
library(devtools)
document()
check()
document()
library(devtools)
document()
install.packages("Seurat")
document()
check()
BiocManager::install("org.Mm.eg.db")
document()
check()
document()
install()
suppressPackageStartupMessages(library(SummarizedExperiment))
suppressPackageStartupMessages(library(S4Vectors))
library(ClusterGVis)
# a data.frame or SummarizedExperiment object
data("exps")
head(exps)
# check suitable cluster nmbers
getClusters(obj = exps)
# using kemans for clustering
ck <- clusterData(obj = exps,
cluster.method = "kmeans",
cluster.num = 8)
# construct a SummarizedExperiment object
sce <- SummarizedExperiment(assays = list(counts = exps),
colData = S4Vectors::DataFrame(
sample = colnames(exps),
row.names = colnames(exps))
)
sce
# using kemans for clustering
ck2 <- clusterData(obj = sce,
cluster.method = "kmeans",
cluster.num = 8)
# plot line only
visCluster(object = ck,
plot.type = "line")
View(exps)
colnames(exps) <- c("Zygote","2-cell","4-cell","8-cell","Blastocyst")
data("exps")
colnames(exps) <- c("Zygote","2-cell","4-cell","8-cell","Morula","Blastocyst")
save(exps,file = "./data/exps.rda")
data("exps")
load("data/exps.rda")
document()
install()
suppressPackageStartupMessages(library(SummarizedExperiment))
suppressPackageStartupMessages(library(S4Vectors))
library(ClusterGVis)
# a data.frame or SummarizedExperiment object
data("exps")
head(exps)
# check suitable cluster nmbers
getClusters(obj = exps)
# using kemans for clustering
ck <- clusterData(obj = exps,
cluster.method = "kmeans",
cluster.num = 8)
# construct a SummarizedExperiment object
sce <- SummarizedExperiment(assays = list(counts = exps),
colData = S4Vectors::DataFrame(
sample = colnames(exps),
row.names = colnames(exps))
)
sce
# using kemans for clustering
ck2 <- clusterData(obj = sce,
cluster.method = "kmeans",
cluster.num = 8)
# plot line only
visCluster(object = ck,
plot.type = "line")
# plot line only
visCluster(object = ck,
plot.type = "line")
# plot line only
visCluster(object = ck,
plot.type = "line")
# plot line only
visCluster(object = ck,
plot.type = "line")
# plot heatmap only
visCluster(object = ck,
plot.type = "heatmap")
# plot heatmap only
visCluster(object = ck,
plot.type = "both")
suppressPackageStartupMessages(library(Seurat))
data("pbmc_subset")
# find markers for every cluster compared to all remaining cells
# report only the positive ones
pbmc.markers.all <- Seurat::FindAllMarkers(pbmc_subset,
only.pos = TRUE,
min.pct = 0.25,
logfc.threshold = 0.25)
# get top 10 genes
pbmc.markers <- pbmc.markers.all |>
dplyr::group_by(cluster) |>
dplyr::top_n(n = 20, wt = avg_log2FC)
# check
head(pbmc.markers)
# prepare data from seurat object
st.data <- prepareDataFromscRNA(object = pbmc_subset,
diffData = pbmc.markers,
showAverage = TRUE)
# check
str(st.data)
# line plot
visCluster(object = st.data,
plot.type = "line")
# add gene name
markGenes = unique(pbmc.markers$gene)[
sample(1:length(unique(pbmc.markers$gene)),40,
replace = FALSE)]
# heatmap plot
# pdf('sc1.pdf',height = 10,width = 6,onefile = FALSE)
visCluster(object = st.data,
plot.type = "heatmap",
column_names_rot = 45,
markGenes = markGenes,
cluster.order = c(1:9))
# dev.off()
# add gene name
markGenes = unique(pbmc.markers$gene)[
sample(1:length(unique(pbmc.markers$gene)),40,
replace = FALSE)]
# heatmap plot
# pdf('sc1.pdf',height = 10,width = 6,onefile = FALSE)
invisible(
visCluster(object = st.data,
plot.type = "heatmap",
column_names_rot = 45,
markGenes = markGenes,
cluster.order = c(1:9))
)
# dev.off()
# add gene name
markGenes = unique(pbmc.markers$gene)[
sample(1:length(unique(pbmc.markers$gene)),40,
replace = FALSE)]
# heatmap plot
# pdf('sc1.pdf',height = 10,width = 6,onefile = FALSE)
p <- visCluster(object = st.data,
plot.type = "heatmap",
column_names_rot = 45,
markGenes = markGenes,
cluster.order = c(1:9))
draw(p)
# add gene name
markGenes = unique(pbmc.markers$gene)[
sample(1:length(unique(pbmc.markers$gene)),40,
replace = FALSE)]
# heatmap plot
# pdf('sc1.pdf',height = 10,width = 6,onefile = FALSE)
p <- visCluster(object = st.data,
plot.type = "heatmap",
column_names_rot = 45,
markGenes = markGenes,
cluster.order = c(1:9))
ComplexHeatmap::draw(p)
# dev.off()
# add gene name
markGenes = unique(pbmc.markers$gene)[
sample(1:length(unique(pbmc.markers$gene)),40,
replace = FALSE)]
# heatmap plot
# pdf('sc1.pdf',height = 10,width = 6,onefile = FALSE)
visCluster(object = st.data,
plot.type = "heatmap",
column_names_rot = 45,
markGenes = markGenes,
cluster.order = c(1:9))
# dev.off()
# add gene name
markGenes = unique(pbmc.markers$gene)[
sample(1:length(unique(pbmc.markers$gene)),40,
replace = FALSE)]
# heatmap plot
# pdf('sc1.pdf',height = 10,width = 6,onefile = FALSE)
visCluster(object = st.data,
plot.type = "heatmap",
column_names_rot = 45,
markGenes = markGenes,
cluster.order = c(1:9))
# dev.off()
# add gene name
markGenes <- unique(pbmc.markers$gene)[
sample(1:length(unique(pbmc.markers$gene)),40,replace = FALSE)]
# heatmap plot
# pdf('sc1.pdf',height = 10,width = 6,onefile = FALSE)
visCluster(object = st.data,
plot.type = "heatmap",
column_names_rot = 45,
markGenes = markGenes,
cluster.order = c(1:9))
# dev.off()
# add gene name
markGenes <- unique(pbmc.markers$gene)[
sample(1:length(unique(pbmc.markers$gene)),40,replace = FALSE)]
# heatmap plot
# pdf('sc1.pdf',height = 10,width = 6,onefile = FALSE)
p <- visCluster(object = st.data,
plot.type = "heatmap",
column_names_rot = 45,
markGenes = markGenes,
cluster.order = c(1:9))
# dev.off()
library(SingleCellExperiment)
document()
check()
data("pbmc_subset")
pbmc.markers.all <- Seurat::FindAllMarkers(pbmc_subset,
only.pos = TRUE,
min.pct = 0.25,
logfc.threshold = 0.25)
# get top 10 genes
pbmc.markers <- pbmc.markers.all |>
dplyr::group_by(cluster) |>
dplyr::top_n(n = 20, wt = avg_log2FC)
st.data <- prepareDataFromscRNA(object = sce,
diffData = pbmc.markers[,c("cluster","gene")],
showAverage = TRUE)
data("pbmc_subset")
# transform into SingleCellExperiment 
sce <- as.SingleCellExperiment(pbmc_subset)
pbmc.markers.all <- Seurat::FindAllMarkers(pbmc_subset,
only.pos = TRUE,
min.pct = 0.25,
logfc.threshold = 0.25)
# get top 10 genes
pbmc.markers <- pbmc.markers.all |>
dplyr::group_by(cluster) |>
dplyr::top_n(n = 20, wt = avg_log2FC)
st.data <- prepareDataFromscRNA(object = sce,
diffData = pbmc.markers[,c("cluster","gene")],
showAverage = TRUE)
document()
check()
install()
suppressPackageStartupMessages(library(SummarizedExperiment))
suppressPackageStartupMessages(library(S4Vectors))
library(ClusterGVis)
# a data.frame or SummarizedExperiment object
data("exps")
head(exps)
data("pbmc_subset")
# transform into SingleCellExperiment 
sce <- as.SingleCellExperiment(pbmc_subset)
library(Seurat)
data("pbmc_subset")
# transform into SingleCellExperiment 
sce <- as.SingleCellExperiment(pbmc_subset)
pbmc.markers.all <- Seurat::FindAllMarkers(pbmc_subset,
only.pos = TRUE,
min.pct = 0.25,
logfc.threshold = 0.25)
# get top 10 genes
pbmc.markers <- pbmc.markers.all |>
dplyr::group_by(cluster) |>
dplyr::top_n(n = 20, wt = avg_log2FC)
st.data <- prepareDataFromscRNA(object = sce,
diffData = pbmc.markers[,c("cluster","gene")],
showAverage = TRUE)
visCluster(object = st.data,
plot.type = "line")
library(Seurat)
data("pbmc_subset")
# transform into SingleCellExperiment 
sce <- as.SingleCellExperiment(pbmc_subset)
pbmc.markers.all <- Seurat::FindAllMarkers(pbmc_subset,
only.pos = TRUE,
min.pct = 0.25,
logfc.threshold = 0.25)
# get top 10 genes
pbmc.markers <- pbmc.markers.all |>
dplyr::group_by(cluster) |>
dplyr::top_n(n = 20, wt = avg_log2FC)
st.data <- prepareDataFromscRNA(object = sce,
diffData = pbmc.markers[,c("cluster","gene")],
showAverage = TRUE)
visCluster(object = st.data,
plot.type = "line")
library(Seurat)
library(devtools)
document()
document()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
document()
check()
document()
check()
document()
check()
load("../../../ClusterGVis-0.1.1/data/HSMM.rda")
BiocManager::install("monocle")
BiocManager::install("monocle")
load("../../../ClusterGVis-0.1.1/data/HSMM.rda")
getwd()
save(HSMM,file = "HSMM.rda",compress = "xz")
save(HSMM,file = "HSMM.rda",compress = "gzip")
save(HSMM,file = "HSMM.rda",compress = "bzip2")
save(HSMM,file = "HSMM.rda",compress = "zstd")
saveRDS(HSMM,file = "HSMM.rds",compress = "xz")
saveRDS(HSMM,file = "HSMM.rds",compress = "xz",ascii = T)
View(HSMM)
HSMM@reducedDimS
HSMM@reducedDimS <- NULL
class(HSMM@reducedDimS)
HSMM@reducedDimS <- matrix()
HSMM@reducedDimW <- matrix()
save(HSMM,file = "HSMM.rda",compress = "xz")
HSMM@minSpanningTree <- list()
HSMM@minSpanningTree[[1]]
HSMM@minSpanningTree[[1]] |> class()
HSMM@minSpanningTree |> class()
HSMM
summary(fData(HSMM)$num_cells_expressed)
library(monocle)
summary(fData(HSMM)$num_cells_expressed)
hist(fData(HSMM)$num_cells_expressed, breaks = 100,
main = "Distribution of number of cells expressing each gene",
xlab = "Number of Cells")
nrow(HSMM)
genes_to_keep <- fData(HSMM)$num_cells_expressed >= 10
# 查看我们将保留多少基因
table(genes_to_keep)
HSMM_filtered <- HSMM[genes_to_keep, ]
print(HSMM_filtered)
View(HSMM_filtered)
save(HSMM,file = "HSMM.rda",compress = "xz")
save(HSMM_filtered,file = "HSMM_filtered.rda",compress = "xz")
load("../../../ClusterGVis-0.1.1/data/HSMM.rda")
save(HSMM,file = "HSMM.rda",compress = "xz")
genes_to_keep <- fData(HSMM)$num_cells_expressed >= 10
# 查看我们将保留多少基因
table(genes_to_keep)
HSMM_filtered <- HSMM[genes_to_keep, ]
save(HSMM_filtered,file = "HSMM_filtered.rda",compress = "xz")
exprs(HSMM_filtered) <- Matrix(exprs(HSMM_filtered), sparse = TRUE)
library(Matrix)
exprs(HSMM_filtered) <- Matrix(exprs(HSMM_filtered), sparse = TRUE)
exprs(HSMM) <- Matrix(exprs(HSMM), sparse = TRUE)
print(class(exprs(HSMM_filtered)))
HSMM
HSMM_min <- monocle::clearOrdering(HSMM)
