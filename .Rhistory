else{
m <- cbind(m, tmp)
}
}
View(m)
branches
# branche_cell_num <- c()
branch_in = 1
branches_cells <- row.names(subset(Biobase::pData(cds), State == branch_in))
root_state <- subset(Biobase::pData(cds), Pseudotime == 0)[, 'State']
root_state_cells <- row.names(subset(Biobase::pData(cds), State == root_state))
if(cds@dim_reduce_type != 'ICA') {
root_state_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[root_state_cells, ], sep = ''))
branches_cells <- unique(paste('Y_', cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex[branches_cells, ], sep = ''))
}
root_cell <- root_state_cells[which(igraph::degree(g, v = root_state_cells) == 1)]
tip_cell <- branches_cells[which(igraph::degree(g, v = branches_cells) == 1)]
traverse_res <- traverseTree(g, root_cell, tip_cell)
path_cells <- names(traverse_res$shortest_path[[1]])
if(cds@dim_reduce_type != 'ICA') {
pc_ind <- cds@auxOrderingData$DDRTree$pr_graph_cell_proj_closest_vertex
path_cells <- row.names(pc_ind)[paste('Y_', pc_ind[, 1], sep = '') %in% path_cells]
}
cds_subset <- cds[, path_cells]
cds_subset
newdata <- data.frame(Pseudotime = seq(0, max(Biobase::pData(cds_subset)$Pseudotime),length.out = 100))
View(newdata)
tmp <- monocle::genSmoothCurves(cds_subset, cores=cores, trend_formula = trend_formula,
relative_expr = T, new_data = newdata)
View(tmp)
trend_formula
monocle::genSmoothCurves(cds_subset)
monocle::genSmoothCurves(cds_subset,new_data = newdata)
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
plot_multiple_branches_heatmap(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
library(monocle)
plot_multiple_branches_heatmap(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
gc()
library(ClusterGVis)
data("BEAM_res")
data("sig_gene_names")
load("../ClusterGVis-0.1.2/data/HSMM.rda")
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
library(monocle)
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
library(ClusterGVis)
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
data("BEAM_res")
data("sig_gene_names")
load("../ClusterGVis-0.1.2/data/HSMM.rda")
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
library(VGAM)
plot_multiple_branches_heatmap2(HSMM[row.names(subset(BEAM_res,qval < 1e-4)),],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
View(BEAM_res)
sig_gene_names
plot_multiple_branches_heatmap2(HSMM[sig_gene_names[1:100],],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = T,
return_heatmap = T)
plot_multiple_branches_heatmap2(HSMM[sig_gene_names,],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = F,
return_heatmap = T)
plot_multiple_branches_heatmap2(HSMM[sig_gene_names[1:5],],
branches = c(1,3,4,5),
num_clusters = 4,
cores = 1,
use_gene_short_name = T,
show_rownames = F,
return_heatmap = T)
sig_gene_names[1:5]
gc()
library(devtools)
document()
check()
install()
library(devtools)
citation("Rcpp")
citation("ClusterGVis")
document()
install()
library(ClusterGVis)
citation("ClusterGVis")
citation()
citEntry()
document()
document()
install()
citation("ClusterGVis")
document()
check()
document()
check()
data("exps")
getClusters(exps)
document()
check()
install()
library(devtools)
document()
library(devtools)
document()
check()
document()
check()
install()
library(devtools)
document()
check()
document()
library(devtools)
document()
check()
library(ClusterGVis)
data("exps")
#'
#' @examples
#'
#' data("exps")
#'
#' # kmeans
#' ck <- clusterData(obj = exps,
#'                   cluster.method = "kmeans",
#'                   cluster.num = 8)
#'
obj = exprs
#'
#' @examples
#'
#' data("exps")
#'
#' # kmeans
#' ck <- clusterData(obj = exps,
#'                   cluster.method = "kmeans",
#'                   cluster.num = 8)
#'
obj = exps
obj
cluster.method="mfuzz"
TCseq_params_list = list()
object = NULL
object = NULL
min.std = 0
cluster.num = NULL
subcluster = NULL
ComplexHeatmap::ht_opt(message = FALSE)
# check datatype
cls <- class(obj)
if("cell_data_set" %in% cls){
extra_params <- list(cds_obj = obj,assays = "counts",...)
exp <- do.call(pre_pseudotime_matrix,extra_params)
}else if("matrix" %in% cls | "data.frame" %in% cls){
exp <- obj
}
cls
# choose method
cluster.method <- match.arg(cluster.method)
cluster.method
cluster.method %in% c("mfuzz","TCseq")
cluster.method
# ==========================================================================
# mfuzz
# ==========================================================================
# cluster data
# myset <- methods::new("ExpressionSet",exprs = as.matrix(exp))
myset <- Biobase::ExpressionSet(assayData = as.matrix(exp))
myset <- filter.std(myset,min.std = min.std,visu = FALSE)
# whether zsocre data
if(scaleData == TRUE){
myset <- Mfuzz::standardise(myset)
}else{
myset <- myset
}
myset <- Mfuzz::standardise(myset)
myset
standardise <- function(eset){
data <- exprs(eset)
for (i in 1:dim(data)[[1]]){
data[i,] <- (data[i,] - mean(data[i,],na.rm=TRUE))/sd(data[i,],na.rm=TRUE)
}
exprs(eset) <- data
eset
}
myset <- standardise(myset)
standardise <- function(eset){
data <- exprs(eset)
for (i in 1:dim(data)[[1]]){
data[i,] <- (data[i,] - mean(data[i,],na.rm=TRUE))/sd(data[i,],na.rm=TRUE)
}
Biobase::exprs(eset) <- data
eset
}
myset <- standardise(myset)
standardise
myset
standardise <- function(eset){
data <- Biobase::exprs(eset)
for (i in 1:dim(data)[[1]]){
data[i,] <- (data[i,] - mean(data[i,],na.rm=TRUE))/sd(data[i,],na.rm=TRUE)
}
Biobase::exprs(eset) <- data
eset
}
myset <- standardise(myset)
document()
check()
document()
library(devtools)
document()
document()
check()
install()
library(ClusterGVis)
data("exps")
exps
ck <- clusterData(obj = exps,cluster.method = "mfuzz")
obj = exps
cluster.method = "mfuzz"
exp <- obj
# ==========================================================================
# mfuzz
# ==========================================================================
# cluster data
# myset <- methods::new("ExpressionSet",exprs = as.matrix(exp))
myset <- Biobase::ExpressionSet(assayData = as.matrix(exp))
myset <- filter.std(myset,min.std = min.std,visu = FALSE)
#' @name filter.std modified by Mfuzz filter.std
#' @title using filter.std to filter low expression genes
#'
#' @param eset expression matrix, default NULL.
#' @param min.std min stand error, default 0.
#' @param visu whether plot, default FALSE.
#' @param verbose show filter information.
#'
#' @return matrix.
filter.std <- function (eset, min.std,visu=TRUE, verbose = TRUE){
#index <- logical(dim(exprs(eset))[1])
if("matrix" %in% class(eset) | "data.frame" %in% class(eset)){
tmp <- logical(dim(eset)[1])
}else{
tmp <- logical(dim(Biobase::exprs(eset))[1])
}
if (is.numeric(min.std)){
if(class(eset) %in% c("data.frame", "matrix")){
data <- eset
}else{
data <- Biobase::exprs(eset)
}
for (i in 1:length(tmp)){
tmp[i]  <- sd(data[i,],na.rm=TRUE)
#   index[i]  <- ( tmp[i] > min.std)
}
index <- tmp > min.std
index[is.na(index)] <- TRUE
if(verbose){
print(paste(sum(!index),"genes excluded.\n"))
}
}
if (visu){
plot(sort(tmp),xlab="Ordered genes",ylab="Sd")
}
eset[index,]
}
myset <- filter.std(myset,min.std = min.std,visu = FALSE)
min.std = 0
myset <- filter.std(myset,min.std = min.std,visu = FALSE)
myset <- standardise(myset)
# from mfuzz
standardise <- function(eset){
data <- Biobase::exprs(eset)
for (i in 1:dim(data)[[1]]){
data[i,] <- (data[i,] - mean(data[i,],na.rm=TRUE))/sd(data[i,],na.rm=TRUE)
}
Biobase::exprs(eset) <- data
eset
}
myset <- standardise(myset)
cluster.num
cluster.num=
3
cluster_number <- cluster.num
m <- Mfuzz::mestimate(myset)
# from mfuzz
mestimate<- function(eset){
N <-  dim(Biobase::exprs(eset))[[1]]
D <- dim(Biobase::exprs(eset))[[2]]
m.sj <- 1 + (1418/N + 22.05)*D^(-2) + (12.33/N +0.243)*D^(-0.0406*log(N) - 0.1134)
return(m.sj)
}
m <- mestimate(myset)
# cluster step
set.seed(seed)
# user define mfuzz
mfuzz1 <- function(eset,centers,m,...){
cl <- e1071::cmeans(Biobase::exprs(eset),centers = centers,method = "cmeans",m = m,...)
}
mfuzz_res <- mfuzz1(myset, c = cluster_number, m = m)
# ========================
# get clustered data
mtx <- Biobase::assayData(myset)
mtx <- mtx$exprs
raw_cluster_anno <- cbind(mtx,cluster = mfuzz_res$cluster)
document()
install()
check()
library(devtools)
document()
document()
check()
library(devtools)
document()
library(devtools)
document()
install()
document()
install()
library(devtools)
document()
document()
document()
use_vignette()
use_vignette(name = "vignette")
document()
document()
document()
check()
document()
check()
document()
use_r("ClusterGVis-package")
document()
check()
BiocManager::install("Sequencing")
document()
document()
document()
check()
document()
check()
document()
document()
check()
document()
check()
document()
document()
document()
check()
document()
check()
document()
document()
library(devtools)
document()
check()
document()
check()
library(checkhelper)
check_as_cran()
document()
check()
document()
check()
document()
document()
document()
document()
check()
document()
check()
document()
check()
document()
check()
check()
check_dependency()
document()
check()
document()
document()
check()
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
check()
library(devtools)
document()
check()
BiocManager::availableViews()
document()
BiocCheck::BiocCheck('new-package'=TRUE)
BiocManager::install("BiocCheck")
BiocCheck::BiocCheck('new-package'=TRUE)
document()
library(devtools)
document()
BiocCheck::BiocCheck('new-package'=TRUE)
document()
document()
BiocCheck::BiocCheck('new-package'=TRUE)
document()
check()
use_r("datasets")
use_package("methods")
document()
BiocCheck::BiocCheck('new-package'=TRUE)
document()
check()
document()
check()
document()
check()
document()
check()
BiocCheck::BiocCheck('new-package'=TRUE)
lintr::lint_package()
install.packages("lintr")
lintr::lint_package()
document()
install.packages("lintr")
BiocCheck::BiocCheck('new-package'=TRUE)
document()
BiocCheck::BiocCheck('new-package'=TRUE)
document()
BiocCheck::BiocCheck('new-package'=TRUE)
document()
BiocCheck::BiocCheck('new-package'=TRUE)
document()
library(devtools)
document()
check()
BiocCheck::BiocCheck('new-package'=TRUE)
document()
check()
library(devtools)
library(BiocStyle)
install.packages("BiocStyle")
BiocManager::install("BiocStyle")
BiocStyle::html_document()
document()
check()
document()
document()
check()
document()
document()
document()
